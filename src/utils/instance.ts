import { getResponse } from "@/ai/openai";
import { IMessage, ISquashResponse } from "../types/chat";
import { getId } from "./uuid";

export function createMessage(
  author: IMessage["author"],
  content: IMessage["content"]
): IMessage {
  return {
    id: getId(),
    author,
    content,
  };
}

const squashSystemTemplate = `You are an expert on text summarization, code and JSON format.
You are going to summarize the conversation that the user is going to send you in the following format:

CONVERSATION:
--------
- USER: {content}

- ASSISTANT: {content}
--------
...more messages...

into a string containing a summary of what the USER wanted, and a string containing a summary of the result that the ASSISTANT provided.
The USER summary should be only the question or the description of the issue, without any kind of personality.
The summary should have enough information to not having to go back to the previous conversation.
If any code was generated by the ASSISTANT, preserve the correct version of it with the proper markdown format.

IMPORTANT: You are only allowed to reply using only one object in the following JSON format:

\`\`\`
{
   "user": string,
   "assistant": string,
}
\`\`\`

It's really important that you use the previous JSON format.
You cannot write text outside the JSON.`;

export async function squashNodes(
  apikey: string,
  messages: IMessage[]
): Promise<IMessage[]> {
  let response: ISquashResponse = {
    user: "",
    assistant: "",
  };

  try {
    response = JSON.parse(
      (
        await getResponse(apikey, [
          { role: "system", content: squashSystemTemplate },
          {
            role: "user",
            content: messages.reduce((content, node) => {
              content += `- ${node.author}: ${node.content}\n`;
              return content;
            }, ""),
          },
        ])
      )?.content || ""
    );
  } catch (err) {}

  return [
    createMessage("user", response.user),
    createMessage("assistant", response.assistant),
  ];
}

const getChatTitleTemplate = `You are a title generation tool.
You are going to generate a title based on the conversation that the user is going to send you in the following format:

CONVERSATION:
--------
- USER: {content}

- ASSISTANT: {content}
--------
...more messages...

IMPORTANT: You can just provide a title of maximum 20 characters without quotes`;

export async function createInstanceTitle(
  apikey: string,
  messages: IMessage[]
): Promise<string> {
  let title = "";

  try {
    title = (
      (
        await getResponse(apikey, [
          { role: "system", content: getChatTitleTemplate },
          {
            role: "user",
            content: messages.reduce((content, node) => {
              content += `- ${node.author}: ${node.content}\n`;
              return content;
            }, ""),
          },
        ])
      )?.content || ""
    ).replaceAll('"', "");
  } catch (err) {}

  return title;
}
